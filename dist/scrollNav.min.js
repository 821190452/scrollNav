function extend(defaults, options) {
    var extended = {};
    var prop;
    for (prop in defaults) {
        if (Object.prototype.hasOwnProperty.call(defaults, prop)) {
            extended[prop] = defaults[prop];
        }
    }
    for (prop in options) {
        if (Object.prototype.hasOwnProperty.call(options, prop)) {
            extended[prop] = options[prop];
        }
    }
    return extended;
}

function getOrSetID(elem, setID) {
    if (typeof elem !== 'object') {
        return Promise.reject(new Error('First argument must be an object'));
    }
    var id = elem.id;
    if (!id) {
        if (typeof setID !== 'string') {
            return Promise.reject(new Error('Second argument must be a string'));
        }
        id = setID;
        elem.id = id;
    }
    return id;
}

function getYPosition(elem, parent) {
    if (typeof elem !== 'object') {
        return Promise.reject(new Error('First argument must be an object'));
    }
    parent = parent || document.body;
    if (typeof parent !== 'object') {
        return Promise.reject(new Error('Second argument must be an object'));
    }
    var bodyRect = parent.getBoundingClientRect();
    var elemRect = elem.getBoundingClientRect();
    return elemRect.top - bodyRect.top;
}

function nextUntil(elem, selector, filter) {
    var siblings = [];
    elem = elem.nextElementSibling;
    while (elem) {
        if (elem.matches(selector)) 
            { break; }
        if (filter && !elem.matches(filter)) {
            elem = elem.nextElementSibling;
            continue;
        }
        siblings.push(elem);
        elem = elem.nextElementSibling;
    }
    return siblings;
}

function populateSectionData(sections, prefix, settings) {
    var sectionData = [];
    prefix = prefix + '__';
    sections.forEach(function (elem, i) {
        var subSectionData = [];
        var id = getOrSetID(elem, prefix + (i + 1));
        if (settings.subSections && elem.matches(settings.sections)) {
            var subSectionDom = nextUntil(elem, settings.sections, settings.subSections);
            subSectionData = populateSectionData(subSectionDom, id, settings);
        }
        sectionData.push({
            id: id,
            text: elem.innerText || elem.textContent,
            offsetTop: getYPosition(elem),
            subSections: subSectionData
        });
    });
    return sectionData;
}

function createList(data, prefix, isSubList) {
    if ( isSubList === void 0 ) isSubList = false;

    var suffix = isSubList ? '__sub-' : '__';
    var baseClass = prefix + suffix;
    var itemsMarkup = "\n    " + (data.map(function (item) { return ("<li class=\"" + baseClass + "item\" data-sn-section=\"" + (item.id) + "\">\n            <a class=\"" + baseClass + "link\" href=\"#" + (item.id) + "\">" + (item.text) + "</a>\n            " + (item.subSections && item.subSections.length ? ("" + (createList(item.subSections, prefix, true))) : '') + "\n          </li>"); }).join('')) + "\n  ";
    var list = "\n    <ol class=\"" + baseClass + "list\">\n      " + itemsMarkup + "\n    </ol>\n  ";
    return list;
}

function createNav(data, prefix) {
    var nav = document.createElement('nav');
    nav.className = prefix;
    nav.setAttribute('role', 'navigation');
    nav.innerHTML = createList(data, prefix);
    return nav;
}

function insertNav(nav, settings) {
    var target = settings.insertTarget;
    var location = settings.insertLocation;
    if (location === 'append') {
        target.appendChild(nav);
    } else if (location === 'prepend') {
        target.insertBefore(nav, target.firstChild);
    } else if (location === 'before') {
        target.parentNode.insertBefore(nav, target);
    } else if (location === 'after') {
        target.parentNode.insertBefore(nav, target.nextSibling);
    }
}

function updatePositionData(data) {
    data.forEach(function (section) {
        var sectionDom = document.querySelector(("#" + (section.id)));
        section.offsetTop = getYPosition(sectionDom);
        if (section.subSections.length) {
            section.subSections = updatePositionData(section.subSections);
        }
    });
    return data;
}

function getTargetYPosition(target, data) {
    var id = target.getAttribute('href');
    if (id.charAt(0) === '#') {
        id = id.substr(1);
    }
    var targetSection = filterData(data, id);
    return targetSection.offsetTop;
}

function filterData(data, id) {
    var targetSection;
    data.forEach(function (section) {
        if (section.id === id) {
            targetSection = section;
        }
        if (section.subSections && targetSection === undefined) {
            targetSection = filterData(section.subSections, id);
        }
    });
    return targetSection;
}

function calculateScrollDuration(distance) {
    var halfDistance = Math.abs(distance / 2);
    return Math.min(Math.max(halfDistance, 250), 1200);
}

var easeIn = function (p) { return function (t) { return Math.pow(t, p); }; };
var easeOut = function (p) { return function (t) { return 1 - Math.abs(Math.pow(t - 1, p)); }; };
var easeInOut = function (p) { return function (t) { return t < 0.5 ? easeIn(p)(t * 2) / 2 : easeOut(p)(t * 2 - 1) / 2 + 0.5; }; };
var easing = {
    linear: easeInOut(1),
    easeInQuad: easeIn(2),
    easeOutQuad: easeOut(2),
    easeInOutQuad: easeInOut(2),
    easeInCubic: easeIn(3),
    easeOutCubic: easeOut(3),
    easeInOutCubic: easeInOut(3),
    easeInQuart: easeIn(4),
    easeOutQuart: easeOut(4),
    easeInOutQuart: easeInOut(4),
    easeInQuint: easeIn(5),
    easeOutQuint: easeOut(5),
    easeInOutQuint: easeInOut(5)
};

function scrollTo(targetPosition, easingStyle) {
    var this$1 = this;

    return new Promise(function (resolve, reject) { return new Promise((function ($return, $error) {
        var startingPosition, distance, duration, framerate, increment;
        var ellapsedTime, easedTime, next;
        function animateScroll() {
            ellapsedTime += increment;
            easedTime = easing[easingStyle](ellapsedTime / duration);
            next = easedTime * distance + startingPosition;
            window.scroll(0, next);
            if (ellapsedTime < duration) {
                setTimeout(animateScroll, increment);
            } else {
                resolve();
            }
        }
        
        if (typeof targetPosition !== 'number') {
            return $return(reject(new Error('First argument must be a number')));
        }
        easingStyle = easingStyle || 'linear';
        if (typeof easingStyle !== 'string') {
            return $return(reject(new Error('Second argument must be a string')));
        }
        startingPosition = window.pageYOffset;
        distance = targetPosition - startingPosition;
        return calculateScrollDuration(distance).then((function ($await_1) {
            try {
                duration = $await_1;
                framerate = 50;
                increment = 1000 / framerate;
                ellapsedTime = 0;
                animateScroll();
                return $return();
            } catch ($boundEx) {
                return $error($boundEx);
            }
        }).bind(this), $error);
    }).bind(this$1)); });
}

function setupClickHandlers(links, data, cb) {
    function clickHandler(event) {
        event.preventDefault();
        var activeOffset = window.innerHeight / 3 / 2 + 80;
        var targetYPosition = getTargetYPosition(event.target, data);
        var scrollYTarget = targetYPosition - activeOffset;
        scrollTo(scrollYTarget, 'easeOutQuad').then(cb());
    }
    
    links.forEach(function (link) {
        link.addEventListener('click', clickHandler);
    });
    return clickHandler;
}

function getActiveSection(data, boundryTop, boundryBottom) {
    var activeSection;
    data.forEach(function (section) {
        if (section.offsetTop > boundryBottom) {
            if (!activeSection && section.offsetTop < boundryTop) {
                activeSection = section;
            }
        } else {
            activeSection = section;
        }
    });
    if (activeSection && activeSection.subSections.length) {
        var activeSubSection;
        activeSubSection = getActiveSection(activeSection.subSections, boundryTop, boundryBottom);
        if (activeSubSection) {
            activeSection = activeSubSection;
        }
    }
    return activeSection;
}

function updateActiveNavItem(activeSection, nav) {
    var previousActive = nav.querySelector('[data-sn-active]');
    if (!activeSection) {
        if (previousActive) {
            previousActive.classList.remove('scroll-nav__item--active');
            previousActive.removeAttribute('data-sn-active');
        }
        return;
    }
    var currentActive = nav.querySelector('[data-sn-section=' + activeSection.id + ']');
    if (currentActive && currentActive !== previousActive) {
        if (previousActive) {
            previousActive.classList.remove('scroll-nav__item--active');
            previousActive.removeAttribute('data-sn-active');
        }
        currentActive.classList.add('scroll-nav__item--active');
        currentActive.setAttribute('data-sn-active', true);
    }
}

function setupScrollHandler(data, nav) {
    function scrollHandler() {
        var top = window.scrollY || window.pageYOffset || document.body.scrollTop;
        var boundryTop = top + 80;
        var boundryBottom = boundryTop + window.innerHeight / 3;
        var activeSection = getActiveSection(data, boundryTop, boundryBottom);
        updateActiveNavItem(activeSection, nav);
        return activeSection;
    }
    
    window.addEventListener('scroll', scrollHandler);
    return scrollHandler;
}

function setupResizeHandler(scrollNav) {
    function resizeHandler() {
        scrollNav.data = updatePositionData(scrollNav.data);
    }
    
    window.addEventListener('resize', resizeHandler);
    return resizeHandler;
}

function teardownClickHandlers(nav, clickHandler) {
    var links = nav.querySelectorAll('a');
    links.forEach(function (link) {
        link.removeEventListener('click', clickHandler);
    });
}

function teardownScrollHandler(scrollHandler) {
    window.removeEventListener('scroll', scrollHandler);
}

function teardownResizelHandler(resizeHandler) {
    window.removeEventListener('resize', resizeHandler);
}

var clickHandler;
var scrollHandler;
var resizeHandler;
if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
function isElement(element) {
    return element instanceof Element;
}

function init(elem, options) {
    var defaults = {
        sections: 'h2',
        insertTarget: elem,
        insertLocation: 'before'
    };
    this.settings = extend(defaults, options);
    var locationOptions = ['append','prepend','after','before'];
    if (!isElement(elem)) {
        if (this.settings.debug) {
            console.error(("\n        scrollNav build failed, content argument \"" + elem + "\" is not an HTML Element\n      "));
        }
        return;
    }
    if (this.settings.insertTarget && !isElement(this.settings.insertTarget)) {
        if (this.settings.debug) {
            console.error(("\n        scrollNav build failed, options.insertTarget \"" + elem + "\" is not an HTML Element\n      "));
        }
        return;
    }
    if (locationOptions.indexOf(this.settings.insertLocation) < 1) {
        if (this.settings.debug) {
            console.error(("\n        scrollNav build failed, options.insertLocation \"" + (this.settings.insertLocation) + "\" is not a valid option\n      "));
        }
        return;
    }
    var sectionsDom = elem.querySelectorAll(this.settings.sections);
    if (!sectionsDom.length) {
        if (this.settings.debug) {
            console.error(("\n        scrollNav build failed, could not find any \"" + (this.settings.sections) + "\"\n        elements inside of \"" + elem + "\"\n      "));
        }
        return;
    }
    this.data = populateSectionData(sectionsDom, 'scroll-nav', this.settings);
    var nav = createNav(this.data, 'scroll-nav', this.settings);
    insertNav(nav, this.settings);
    clickHandler = setupClickHandlers(nav.querySelectorAll('a'), this.data, this.settings.onScroll);
    scrollHandler = setupScrollHandler(this.data, nav);
    resizeHandler = setupResizeHandler(this);
    if (this.settings.onInit) 
        { return this.settings.onInit(); }
}

function destroy(options) {
    this.settings = extend(this.settings, options);
    var nav = document.querySelector('.scroll-nav');
    teardownClickHandlers(nav, clickHandler);
    teardownScrollHandler(scrollHandler);
    teardownResizelHandler(resizeHandler);
    nav.remove();
    if (this.settings.onDestroy) 
        { return this.settings.onDestroy(); }
}

function updatePositions(options) {
    this.settings = extend(this.settings, options);
    this.data = updatePositionData(this.data);
    if (this.settings.onUpdatePositions) 
        { return this.settings.onUpdatePositions(); }
}

var scrollNav = {
    init: init,
    destroy: destroy,
    updatePositions: updatePositions
};

module.exports = scrollNav;
//# sourceMappingURL=scrollNav.min.js.map
